Dictionaries are data structures that index values by a given key (key-value pairs).

Dictionaries are written with curly brackets {}, and they have keys and values.


General Format of Dictionaries:
-------------------------------
DictionarieName{"Key":"Value"}

General Format of Dictionaries:
-------------------------------
DictionaryName {

key1: value1,
key2: value2,
.
.
.
keyN: valueN,
}

Example
ages = dict()
ages['Peter'] = 12
ages['Susan'] = 13
for key, value in ages.items(): 
    print(key, value) 

You can create an ordered dictionary which preserves the order in which the keys are inserted.
This is done by importing the OrderedDictionary from the collections library, and call the OrderedDictionary() built-in method.

Syntax
-------

from collections import OrderedDict
dictionary_name = OrderedDict()

Exmaple
-------
from collections import OrderedDict 

ages = OrderedDict()

ages['Peter'] = 12
ages['Susan'] = 10
ages['Maria'] = 5
  
for key, value in ages.items(): 
    print(key, value) 

Loop Through the Dictionary

Loop to Get All Keys
To get all keys from the dictionary​, use the following syntax

ages = {
    "Peter": 10,
    "Isabel": 11,
    "Anna": 9,
    "Thomas": 10,
    "Bob": 10,
    "Joseph": 11,
    "Maria": 12,
    "Gabriel": 10,
}

for x in ages:
  print(x)

Loop to Get All Values
To get all values from the dictionary​ use the following syntax:

ages = {
    "Peter": 10,
    "Isabel": 11,
    "Anna": 9,
    "Thomas": 10,
    "Bob": 10,
    "Joseph": 11,
    "Maria": 12,
    "Gabriel": 10,
}

for x in ages:
  print(ages[x])

  Another method to return values of a dictionary is to use values() function:

  ages = {
    "Peter": 10,
    "Isabel": 11,
    "Anna": 9,
    "Thomas": 10,
    "Bob": 10,
    "Joseph": 11,
    "Maria": 12,
    "Gabriel": 10,
}

for x in ages.values():
  print(x)

  Loop to Get Both Keys and Values
It is possible to iterate over the contents of a dictionary using items(), like this:

ages = {
    "Peter": 10,
    "Isabel": 11,
    "Anna": 9,
    "Thomas": 10,
    "Bob": 10,
    "Joseph": 11,
    "Maria": 12,
    "Gabriel": 10,
}

for name, age in ages.items():
  print(name, age)

Nested Dictionary
A dictionary can be made within a dictionary, and you can also use other dictionaries as values.

students = {
    "Peter": {"age": 10, "address": "Lisbon"},
    "Isabel": {"age": 11, "address": "Sesimbra"},
    "Anna": {"age": 9, "address": "Lisbon"},
}
print(students)
print(students['Peter'])
print(students['Peter']['address'])

Looping Through a Nested Dictionary#
students = {
    "Peter": {"age": 10, "address": "Lisbon"},
    "Isabel": {"age": 11, "address": "Sesimbra"},
    "Anna": {"age": 9, "address": "Lisbon"},
}

for p_id, p_info in students.items():
    print("\nPerson Name:", p_id)
    for key in p_info:
        print(key + ':', p_info[key])
